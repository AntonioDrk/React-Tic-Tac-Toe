//@ts-node
import { createServer } from 'http';
import { Server, type Socket } from 'socket.io';

const PORT = process.env.PORT || 3001;
var SocketData = new Map<String, {'socketInstance':Socket, 'piece':String, 'joinedRoom': string}>();

const httpServer = createServer();
const io = new Server(httpServer, {
  cors: {
    origin: '*'
  }
});

/**
 * 
 * @param min INCLUSIVE
 * @param max EXCLUSIVE
 * @returns 
 */
function randomInt(min:number, max:number):number {
  return Math.floor(Math.random() * max + min);
}

io.on('connection', (socket:Socket) => {
  console.log(socket.id + ' connected to the backend server');
  // Bind the global events
  socket.on('join', (args:[string,string])=>{onClientJoin(socket, args);});

  socket.on('state-change', (args) => {onGameStateChange(socket, args);});

  socket.on('disconnect', ()=>onDisconnect(socket));
});

/**
 * Handles the state change pinged by the client
 * @param socket The socket object
 * @param newState The new State Object 
 */
function onGameStateChange(socket:Socket, [newState, newHistoryIndex]:[any,number]):void{
  const roomId = SocketData.get(findSocketUUIDAfterId(socket.id)).joinedRoom;
  //console.log('State-change event called with : ' + roomId + '\nnewState=' + newState + '\nnewHistoryIndex=' + newHistoryIndex);
  socket.to(roomId).emit('stateChange', [newState, newHistoryIndex]);
}

/**
 * Handles disconnections from the server
 * @param socket The socket object
 */
function onDisconnect(socket:Socket):void{
  const sockUUID = findSocketUUIDAfterId(socket.id);
  if(SocketData.has(sockUUID)){
    SocketData.delete(sockUUID);
  }
  console.log(socket.id + ' disconnected to the backend server');
}

/**
 * Handler for the requests of the client to join a room with a given id
 * @param socket The socket object
 * @param args The uuid of the socket ininitating the join request and  of the socket that will be joined
 */
function onClientJoin(socket:Socket, [fromId, toId]:[string,string]):void{
  console.log(`[${fromId}] joining [${toId}]`);

  socket.join(toId);
  io.to(toId).emit('playerJoined', { 'joinedId': toId }); // Sends the room the players are in
  

  // Usually called when the player first connects to the server
  if (fromId === toId){
    SocketData.set(fromId, {
      'socketInstance': socket, 
      'piece': '', 
      'joinedRoom': fromId
    });
    return;
  }

  let randomPiece = randomInt(0, 2);
  SocketData.set(fromId, {
    'piece': randomPiece === 0 ? 'X' : 'O', 
    'socketInstance': SocketData.get(fromId).socketInstance, 
    'joinedRoom': toId
  });
  SocketData.set(toId, {
    'piece': randomPiece === 1 ? 'X' : 'O', 
    'socketInstance': SocketData.get(toId).socketInstance,
    'joinedRoom': SocketData.get(toId).joinedRoom
  });

  // Send the data to the sockets with what piece they start and that the game is starting
  SocketData.get(fromId).socketInstance.emit('start-game', SocketData.get(fromId).piece);
  SocketData.get(toId).socketInstance.emit('start-game', SocketData.get(toId).piece);
}

/**
 * Finds the uuid4 for a given socketid (generated by socketio)
 * @param socketId Id of the scoket generated by socketio
 * @returns The found socket uuid4
 */
function findSocketUUIDAfterId(socketId:string):string|null{
  let foundSocketUUID = null;
  SocketData.forEach((val, key) => {
    if(val.socketInstance.id === socketId){
      foundSocketUUID = key;
    }
  });
  return foundSocketUUID;
}

httpServer.listen(PORT, () => { console.log('Server online on port ' + PORT); });